description = 'GRAL core'

buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'net.saliman:gradle-cobertura-plugin:2.6.+'
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.+'
		classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.0'
    classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.8'
	}
}

apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven'
apply plugin: 'signing'

dependencies {
	testCompile 'junit:junit:4.12'
	jmh 'commons-io:commons-io:2.4'
	testRuntime 'org.slf4j:slf4j-log4j12:1.7.26'  // Required for Cobertura
}

cobertura.coverageFormats = ['html', 'xml']

task report {
	dependsOn = ['cobertura', check]
	description = 'Generates reports.'
	group = 'Report'

	tasks.withType(Pmd).each {pmdTask ->
		pmdTask.ignoreFailures = true
	}
	tasks.withType(Checkstyle).each {checkstyleTask ->
		checkstyleTask.ignoreFailures = true
		checkstyleTask.showViolations = false
	}
}

task javadocJar(type: Jar) {
	description = 'Assembles a jar archive containing the API doc.'
	group = 'Build'
	from javadoc
	classifier 'javadoc'
}


artifacts {
	archives sourceJar, javadocJar
}

signing {
	required { gradle.taskGraph.hasTask('uploadArchives') }
  useGpgCmd()
	sign configurations.archives
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "${mavenStagingRepositoryUrl}") {
				authentication(userName: mavenUsername, password: mavenPassword)
			}

			snapshotRepository(url: "${mavenSnapshotsRepositoryUrl}") {
				authentication(userName: mavenUsername, password: mavenPassword)
			}

			pom.project {
				name rootProject.name
				packaging 'jar'
				description rootProject.description
				url website
				inceptionYear inceptionYear
				licenses {
					license {
						name 'GNU Library or Lesser General Public License (LGPL)'
						url 'http://www.gnu.org/licenses/lgpl.txt'
					}
				}
				developers {
					developer {
						id owner1_id
						name owner1_name
						email owner1_email
					}
					developer {
						id owner2_id
						name owner2_name
						email owner2_email
					}
				}
				scm {
					connection 'scm:git:git://github.com/eseifert/gral.git'
					developerConnection 'scm:git:git@github.com:eseifert/gral.git'
					url website
				}
				issueManagement {
					system 'GitHub Issues'
					url website
				}
			}
		}
	}
}